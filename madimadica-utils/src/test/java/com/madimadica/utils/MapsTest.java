package com.madimadica.utils;

import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Tests autogenerated by {@link com.madimadica.utils.internal.generator.MapsTestGenerator}
 */
public class MapsTest {

    @Test
    void ofNullable1() {
        Map<Integer, String> map = Maps.ofNullable(1, "one");
        assertEquals(1, map.size());
        assertEquals("one", map.get(1));
    }

    @Test
    void ofNullable1_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(null, "one"));
    }

    @Test
    void ofNullable1_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofNullable(1, null));
    }

    @Test
    void ofNullable2() {
        Map<Integer, String> map = Maps.ofNullable(1, "one", 2, "two");
        assertEquals(2, map.size());
        assertEquals("one", map.get(1));
        assertEquals("two", map.get(2));
    }

    @Test
    void ofNullable2_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(null, "one", 2, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "two", null, "two"));
    }

    @Test
    void ofNullable2_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofNullable(1, null, 2, "one"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "two", 2, null));
    }

    @Test
    void ofNullable3() {
        Map<Integer, String> map = Maps.ofNullable(1, "one", 2, "two", 3, "three");
        assertEquals(3, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
    }

    @Test
    void ofNullable3_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(null, "one", 2, "one", 3, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "two", null, "two", 3, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "three", 2, "three", null, "three"));
    }

    @Test
    void ofNullable3_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofNullable(1, null, 2, "one", 3, "one"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "two", 2, null, 3, "two"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "three", 2, "three", 3, null));
    }

    @Test
    void ofNullable4() {
        Map<Integer, String> map = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four");
        assertEquals(4, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
    }

    @Test
    void ofNullable4_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(null, "one", 2, "one", 3, "one", 4, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "two", null, "two", 3, "two", 4, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "three", 2, "three", null, "three", 4, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "four", 2, "four", 3, "four", null, "four"));
    }

    @Test
    void ofNullable4_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofNullable(1, null, 2, "one", 3, "one", 4, "one"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "two", 2, null, 3, "two", 4, "two"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "three", 2, "three", 3, null, 4, "three"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "four", 2, "four", 3, "four", 4, null));
    }

    @Test
    void ofNullable5() {
        Map<Integer, String> map = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five");
        assertEquals(5, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
    }

    @Test
    void ofNullable5_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five"));
    }

    @Test
    void ofNullable5_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null));
    }

    @Test
    void ofNullable6() {
        Map<Integer, String> map = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six");
        assertEquals(6, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
    }

    @Test
    void ofNullable6_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six"));
    }

    @Test
    void ofNullable6_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null));
    }

    @Test
    void ofNullable7() {
        Map<Integer, String> map = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven");
        assertEquals(7, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
    }

    @Test
    void ofNullable7_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven"));
    }

    @Test
    void ofNullable7_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null));
    }

    @Test
    void ofNullable8() {
        Map<Integer, String> map = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight");
        assertEquals(8, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
    }

    @Test
    void ofNullable8_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight"));
    }

    @Test
    void ofNullable8_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null));
    }

    @Test
    void ofNullable9() {
        Map<Integer, String> map = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine");
        assertEquals(9, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
        assertEquals("nine",  map.get(9));
    }

    @Test
    void ofNullable9_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine"));
    }

    @Test
    void ofNullable9_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null));
    }

    @Test
    void ofNullable10() {
        Map<Integer, String> map = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten");
        assertEquals(10, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
        assertEquals("nine",  map.get(9));
        assertEquals("ten",   map.get(10));
    }

    @Test
    void ofNullable10_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten"));
    }

    @Test
    void ofNullable10_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null));
    }

    @Test
    void ofNullable11() {
        Map<Integer, String> map = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven");
        assertEquals(11, map.size());
        assertEquals("one",    map.get(1));
        assertEquals("two",    map.get(2));
        assertEquals("three",  map.get(3));
        assertEquals("four",   map.get(4));
        assertEquals("five",   map.get(5));
        assertEquals("six",    map.get(6));
        assertEquals("seven",  map.get(7));
        assertEquals("eight",  map.get(8));
        assertEquals("nine",   map.get(9));
        assertEquals("ten",    map.get(10));
        assertEquals("eleven", map.get(11));
    }

    @Test
    void ofNullable11_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six", 11, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven", 11, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight", 11, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine", 11, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten", 11, "ten"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", null, "eleven"));
    }

    @Test
    void ofNullable11_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six", 11, "six"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven", 11, "seven"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight", 11, "eight"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine", 11, "nine"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null, 11, "ten"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", 11, null));
    }

    @Test
    void ofNullable12() {
        Map<Integer, String> map = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve");
        assertEquals(12, map.size());
        assertEquals("one",    map.get(1));
        assertEquals("two",    map.get(2));
        assertEquals("three",  map.get(3));
        assertEquals("four",   map.get(4));
        assertEquals("five",   map.get(5));
        assertEquals("six",    map.get(6));
        assertEquals("seven",  map.get(7));
        assertEquals("eight",  map.get(8));
        assertEquals("nine",   map.get(9));
        assertEquals("ten",    map.get(10));
        assertEquals("eleven", map.get(11));
        assertEquals("twelve", map.get(12));
    }

    @Test
    void ofNullable12_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one", 12, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two", 12, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three", 12, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four", 12, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five", 12, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six", 11, "six", 12, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven", 11, "seven", 12, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight", 11, "eight", 12, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine", 11, "nine", 12, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten", 11, "ten", 12, "ten"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", null, "eleven", 12, "eleven"));
        assertThrows(NullPointerException.class, () -> Maps.ofNullable(1, "twelve", 2, "twelve", 3, "twelve", 4, "twelve", 5, "twelve", 6, "twelve", 7, "twelve", 8, "twelve", 9, "twelve", 10, "twelve", 11, "twelve", null, "twelve"));
    }

    @Test
    void ofNullable12_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one", 12, "one"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two", 12, "two"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three", 12, "three"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four", 12, "four"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five", 12, "five"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six", 11, "six", 12, "six"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven", 11, "seven", 12, "seven"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight", 11, "eight", 12, "eight"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine", 11, "nine", 12, "nine"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null, 11, "ten", 12, "ten"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", 11, null, 12, "eleven"));
        assertDoesNotThrow(() -> Maps.ofNullable(1, "twelve", 2, "twelve", 3, "twelve", 4, "twelve", 5, "twelve", 6, "twelve", 7, "twelve", 8, "twelve", 9, "twelve", 10, "twelve", 11, "twelve", 12, null));
    }

    @Test
    void ofNullable_whenMutate_thenThrow() {
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofNullable(1, "one").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofNullable(1, "one", 2, "two").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofNullable(1, "one", 2, "two", 3, "three").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve").put(0, "zero"));
    }

    @Test
    void ofMutable1() {
        Map<Integer, String> map = Maps.ofMutable(1, "one");
        assertEquals(1, map.size());
        assertEquals("one", map.get(1));
    }

    @Test
    void ofMutable1_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(null, "one"));
    }

    @Test
    void ofMutable1_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofMutable(1, null));
    }

    @Test
    void ofMutable2() {
        Map<Integer, String> map = Maps.ofMutable(1, "one", 2, "two");
        assertEquals(2, map.size());
        assertEquals("one", map.get(1));
        assertEquals("two", map.get(2));
    }

    @Test
    void ofMutable2_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(null, "one", 2, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "two", null, "two"));
    }

    @Test
    void ofMutable2_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofMutable(1, null, 2, "one"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "two", 2, null));
    }

    @Test
    void ofMutable3() {
        Map<Integer, String> map = Maps.ofMutable(1, "one", 2, "two", 3, "three");
        assertEquals(3, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
    }

    @Test
    void ofMutable3_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(null, "one", 2, "one", 3, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "two", null, "two", 3, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "three", 2, "three", null, "three"));
    }

    @Test
    void ofMutable3_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofMutable(1, null, 2, "one", 3, "one"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "two", 2, null, 3, "two"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "three", 2, "three", 3, null));
    }

    @Test
    void ofMutable4() {
        Map<Integer, String> map = Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four");
        assertEquals(4, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
    }

    @Test
    void ofMutable4_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(null, "one", 2, "one", 3, "one", 4, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "two", null, "two", 3, "two", 4, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "three", 2, "three", null, "three", 4, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "four", 2, "four", 3, "four", null, "four"));
    }

    @Test
    void ofMutable4_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofMutable(1, null, 2, "one", 3, "one", 4, "one"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "two", 2, null, 3, "two", 4, "two"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "three", 2, "three", 3, null, 4, "three"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "four", 2, "four", 3, "four", 4, null));
    }

    @Test
    void ofMutable5() {
        Map<Integer, String> map = Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five");
        assertEquals(5, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
    }

    @Test
    void ofMutable5_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five"));
    }

    @Test
    void ofMutable5_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null));
    }

    @Test
    void ofMutable6() {
        Map<Integer, String> map = Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six");
        assertEquals(6, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
    }

    @Test
    void ofMutable6_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six"));
    }

    @Test
    void ofMutable6_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null));
    }

    @Test
    void ofMutable7() {
        Map<Integer, String> map = Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven");
        assertEquals(7, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
    }

    @Test
    void ofMutable7_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven"));
    }

    @Test
    void ofMutable7_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null));
    }

    @Test
    void ofMutable8() {
        Map<Integer, String> map = Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight");
        assertEquals(8, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
    }

    @Test
    void ofMutable8_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight"));
    }

    @Test
    void ofMutable8_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null));
    }

    @Test
    void ofMutable9() {
        Map<Integer, String> map = Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine");
        assertEquals(9, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
        assertEquals("nine",  map.get(9));
    }

    @Test
    void ofMutable9_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine"));
    }

    @Test
    void ofMutable9_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null));
    }

    @Test
    void ofMutable10() {
        Map<Integer, String> map = Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten");
        assertEquals(10, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
        assertEquals("nine",  map.get(9));
        assertEquals("ten",   map.get(10));
    }

    @Test
    void ofMutable10_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten"));
    }

    @Test
    void ofMutable10_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null));
    }

    @Test
    void ofMutable11() {
        Map<Integer, String> map = Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven");
        assertEquals(11, map.size());
        assertEquals("one",    map.get(1));
        assertEquals("two",    map.get(2));
        assertEquals("three",  map.get(3));
        assertEquals("four",   map.get(4));
        assertEquals("five",   map.get(5));
        assertEquals("six",    map.get(6));
        assertEquals("seven",  map.get(7));
        assertEquals("eight",  map.get(8));
        assertEquals("nine",   map.get(9));
        assertEquals("ten",    map.get(10));
        assertEquals("eleven", map.get(11));
    }

    @Test
    void ofMutable11_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six", 11, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven", 11, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight", 11, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine", 11, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten", 11, "ten"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", null, "eleven"));
    }

    @Test
    void ofMutable11_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six", 11, "six"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven", 11, "seven"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight", 11, "eight"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine", 11, "nine"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null, 11, "ten"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", 11, null));
    }

    @Test
    void ofMutable12() {
        Map<Integer, String> map = Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve");
        assertEquals(12, map.size());
        assertEquals("one",    map.get(1));
        assertEquals("two",    map.get(2));
        assertEquals("three",  map.get(3));
        assertEquals("four",   map.get(4));
        assertEquals("five",   map.get(5));
        assertEquals("six",    map.get(6));
        assertEquals("seven",  map.get(7));
        assertEquals("eight",  map.get(8));
        assertEquals("nine",   map.get(9));
        assertEquals("ten",    map.get(10));
        assertEquals("eleven", map.get(11));
        assertEquals("twelve", map.get(12));
    }

    @Test
    void ofMutable12_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one", 12, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two", 12, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three", 12, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four", 12, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five", 12, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six", 11, "six", 12, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven", 11, "seven", 12, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight", 11, "eight", 12, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine", 11, "nine", 12, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten", 11, "ten", 12, "ten"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", null, "eleven", 12, "eleven"));
        assertThrows(NullPointerException.class, () -> Maps.ofMutable(1, "twelve", 2, "twelve", 3, "twelve", 4, "twelve", 5, "twelve", 6, "twelve", 7, "twelve", 8, "twelve", 9, "twelve", 10, "twelve", 11, "twelve", null, "twelve"));
    }

    @Test
    void ofMutable12_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one", 12, "one"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two", 12, "two"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three", 12, "three"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four", 12, "four"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five", 12, "five"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six", 11, "six", 12, "six"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven", 11, "seven", 12, "seven"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight", 11, "eight", 12, "eight"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine", 11, "nine", 12, "nine"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null, 11, "ten", 12, "ten"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", 11, null, 12, "eleven"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "twelve", 2, "twelve", 3, "twelve", 4, "twelve", 5, "twelve", 6, "twelve", 7, "twelve", 8, "twelve", 9, "twelve", 10, "twelve", 11, "twelve", 12, null));
    }

    @Test
    void ofMutable_whenMutate_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofMutable(1, "one").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "one", 2, "two").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "one", 2, "two", 3, "three").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve").put(0, "zero"));
    }

    @Test
    void ofOrdered1() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one");
        assertEquals(1, map.size());
        assertEquals("one", map.get(1));
    }

    @Test
    void ofOrdered1_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(null, "one"));
    }

    @Test
    void ofOrdered1_whenNullValues_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, null));
    }

    @Test
    void ofOrdered1_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals("one", entryList.get(0).getValue());
    }

    @Test
    void ofOrdered2() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two");
        assertEquals(2, map.size());
        assertEquals("one", map.get(1));
        assertEquals("two", map.get(2));
    }

    @Test
    void ofOrdered2_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(null, "one", 2, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", null, "two"));
    }

    @Test
    void ofOrdered2_whenNullValues_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, null, 2, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", 2, null));
    }

    @Test
    void ofOrdered2_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals("one", entryList.get(0).getValue());
        assertEquals("two", entryList.get(1).getValue());
    }

    @Test
    void ofOrdered3() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three");
        assertEquals(3, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
    }

    @Test
    void ofOrdered3_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(null, "one", 2, "one", 3, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", null, "two", 3, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", null, "three"));
    }

    @Test
    void ofOrdered3_whenNullValues_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, null, 2, "one", 3, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", 2, null, 3, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", 3, null));
    }

    @Test
    void ofOrdered3_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
    }

    @Test
    void ofOrdered4() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four");
        assertEquals(4, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
    }

    @Test
    void ofOrdered4_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(null, "one", 2, "one", 3, "one", 4, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", null, "two", 3, "two", 4, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", null, "three", 4, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", null, "four"));
    }

    @Test
    void ofOrdered4_whenNullValues_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, null, 2, "one", 3, "one", 4, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", 2, null, 3, "two", 4, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", 3, null, 4, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", 4, null));
    }

    @Test
    void ofOrdered4_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
    }

    @Test
    void ofOrdered5() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five");
        assertEquals(5, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
    }

    @Test
    void ofOrdered5_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(null, "one", 2, "one", 3, "one", 4, "one", 5, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", null, "two", 3, "two", 4, "two", 5, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", null, "three", 4, "three", 5, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", null, "four", 5, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", null, "five"));
    }

    @Test
    void ofOrdered5_whenNullValues_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, null, 2, "one", 3, "one", 4, "one", 5, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", 2, null, 3, "two", 4, "two", 5, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", 3, null, 4, "three", 5, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", 4, null, 5, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", 5, null));
    }

    @Test
    void ofOrdered5_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
    }

    @Test
    void ofOrdered6() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six");
        assertEquals(6, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
    }

    @Test
    void ofOrdered6_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six"));
    }

    @Test
    void ofOrdered6_whenNullValues_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null));
    }

    @Test
    void ofOrdered6_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
    }

    @Test
    void ofOrdered7() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven");
        assertEquals(7, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
    }

    @Test
    void ofOrdered7_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven"));
    }

    @Test
    void ofOrdered7_whenNullValues_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null));
    }

    @Test
    void ofOrdered7_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
        assertEquals("seven", entryList.get(6).getValue());
    }

    @Test
    void ofOrdered8() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight");
        assertEquals(8, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
    }

    @Test
    void ofOrdered8_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight"));
    }

    @Test
    void ofOrdered8_whenNullValues_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null));
    }

    @Test
    void ofOrdered8_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
        assertEquals("seven", entryList.get(6).getValue());
        assertEquals("eight", entryList.get(7).getValue());
    }

    @Test
    void ofOrdered9() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine");
        assertEquals(9, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
        assertEquals("nine",  map.get(9));
    }

    @Test
    void ofOrdered9_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine"));
    }

    @Test
    void ofOrdered9_whenNullValues_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null));
    }

    @Test
    void ofOrdered9_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals(9, entryList.get(8).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
        assertEquals("seven", entryList.get(6).getValue());
        assertEquals("eight", entryList.get(7).getValue());
        assertEquals("nine",  entryList.get(8).getValue());
    }

    @Test
    void ofOrdered10() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten");
        assertEquals(10, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
        assertEquals("nine",  map.get(9));
        assertEquals("ten",   map.get(10));
    }

    @Test
    void ofOrdered10_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten"));
    }

    @Test
    void ofOrdered10_whenNullValues_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null));
    }

    @Test
    void ofOrdered10_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals(9, entryList.get(8).getKey());
        assertEquals(10, entryList.get(9).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
        assertEquals("seven", entryList.get(6).getValue());
        assertEquals("eight", entryList.get(7).getValue());
        assertEquals("nine",  entryList.get(8).getValue());
        assertEquals("ten",   entryList.get(9).getValue());
    }

    @Test
    void ofOrdered11() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven");
        assertEquals(11, map.size());
        assertEquals("one",    map.get(1));
        assertEquals("two",    map.get(2));
        assertEquals("three",  map.get(3));
        assertEquals("four",   map.get(4));
        assertEquals("five",   map.get(5));
        assertEquals("six",    map.get(6));
        assertEquals("seven",  map.get(7));
        assertEquals("eight",  map.get(8));
        assertEquals("nine",   map.get(9));
        assertEquals("ten",    map.get(10));
        assertEquals("eleven", map.get(11));
    }

    @Test
    void ofOrdered11_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six", 11, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven", 11, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight", 11, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine", 11, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten", 11, "ten"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", null, "eleven"));
    }

    @Test
    void ofOrdered11_whenNullValues_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six", 11, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven", 11, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight", 11, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine", 11, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null, 11, "ten"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", 11, null));
    }

    @Test
    void ofOrdered11_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals(9, entryList.get(8).getKey());
        assertEquals(10, entryList.get(9).getKey());
        assertEquals(11, entryList.get(10).getKey());
        assertEquals("one",    entryList.get(0).getValue());
        assertEquals("two",    entryList.get(1).getValue());
        assertEquals("three",  entryList.get(2).getValue());
        assertEquals("four",   entryList.get(3).getValue());
        assertEquals("five",   entryList.get(4).getValue());
        assertEquals("six",    entryList.get(5).getValue());
        assertEquals("seven",  entryList.get(6).getValue());
        assertEquals("eight",  entryList.get(7).getValue());
        assertEquals("nine",   entryList.get(8).getValue());
        assertEquals("ten",    entryList.get(9).getValue());
        assertEquals("eleven", entryList.get(10).getValue());
    }

    @Test
    void ofOrdered12() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve");
        assertEquals(12, map.size());
        assertEquals("one",    map.get(1));
        assertEquals("two",    map.get(2));
        assertEquals("three",  map.get(3));
        assertEquals("four",   map.get(4));
        assertEquals("five",   map.get(5));
        assertEquals("six",    map.get(6));
        assertEquals("seven",  map.get(7));
        assertEquals("eight",  map.get(8));
        assertEquals("nine",   map.get(9));
        assertEquals("ten",    map.get(10));
        assertEquals("eleven", map.get(11));
        assertEquals("twelve", map.get(12));
    }

    @Test
    void ofOrdered12_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one", 12, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two", 12, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three", 12, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four", 12, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five", 12, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six", 11, "six", 12, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven", 11, "seven", 12, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight", 11, "eight", 12, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine", 11, "nine", 12, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten", 11, "ten", 12, "ten"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", null, "eleven", 12, "eleven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "twelve", 2, "twelve", 3, "twelve", 4, "twelve", 5, "twelve", 6, "twelve", 7, "twelve", 8, "twelve", 9, "twelve", 10, "twelve", 11, "twelve", null, "twelve"));
    }

    @Test
    void ofOrdered12_whenNullValues_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one", 12, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two", 12, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three", 12, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four", 12, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five", 12, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six", 11, "six", 12, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven", 11, "seven", 12, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight", 11, "eight", 12, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine", 11, "nine", 12, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null, 11, "ten", 12, "ten"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", 11, null, 12, "eleven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrdered(1, "twelve", 2, "twelve", 3, "twelve", 4, "twelve", 5, "twelve", 6, "twelve", 7, "twelve", 8, "twelve", 9, "twelve", 10, "twelve", 11, "twelve", 12, null));
    }

    @Test
    void ofOrdered12_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals(9, entryList.get(8).getKey());
        assertEquals(10, entryList.get(9).getKey());
        assertEquals(11, entryList.get(10).getKey());
        assertEquals(12, entryList.get(11).getKey());
        assertEquals("one",    entryList.get(0).getValue());
        assertEquals("two",    entryList.get(1).getValue());
        assertEquals("three",  entryList.get(2).getValue());
        assertEquals("four",   entryList.get(3).getValue());
        assertEquals("five",   entryList.get(4).getValue());
        assertEquals("six",    entryList.get(5).getValue());
        assertEquals("seven",  entryList.get(6).getValue());
        assertEquals("eight",  entryList.get(7).getValue());
        assertEquals("nine",   entryList.get(8).getValue());
        assertEquals("ten",    entryList.get(9).getValue());
        assertEquals("eleven", entryList.get(10).getValue());
        assertEquals("twelve", entryList.get(11).getValue());
    }

    @Test
    void ofOrdered_whenMutate_thenThrow() {
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrdered(1, "one").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrdered(1, "one", 2, "two").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrdered(1, "one", 2, "two", 3, "three").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve").put(0, "zero"));
    }

    @Test
    void ofOrderedNullable1() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one");
        assertEquals(1, map.size());
        assertEquals("one", map.get(1));
    }

    @Test
    void ofOrderedNullable1_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(null, "one"));
    }

    @Test
    void ofOrderedNullable1_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, null));
    }

    @Test
    void ofOrderedNullable1_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals("one", entryList.get(0).getValue());
    }

    @Test
    void ofOrderedNullable2() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two");
        assertEquals(2, map.size());
        assertEquals("one", map.get(1));
        assertEquals("two", map.get(2));
    }

    @Test
    void ofOrderedNullable2_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(null, "one", 2, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "two", null, "two"));
    }

    @Test
    void ofOrderedNullable2_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, null, 2, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "two", 2, null));
    }

    @Test
    void ofOrderedNullable2_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals("one", entryList.get(0).getValue());
        assertEquals("two", entryList.get(1).getValue());
    }

    @Test
    void ofOrderedNullable3() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three");
        assertEquals(3, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
    }

    @Test
    void ofOrderedNullable3_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(null, "one", 2, "one", 3, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "two", null, "two", 3, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "three", 2, "three", null, "three"));
    }

    @Test
    void ofOrderedNullable3_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, null, 2, "one", 3, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "two", 2, null, 3, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "three", 2, "three", 3, null));
    }

    @Test
    void ofOrderedNullable3_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
    }

    @Test
    void ofOrderedNullable4() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four");
        assertEquals(4, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
    }

    @Test
    void ofOrderedNullable4_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(null, "one", 2, "one", 3, "one", 4, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "two", null, "two", 3, "two", 4, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "three", 2, "three", null, "three", 4, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", null, "four"));
    }

    @Test
    void ofOrderedNullable4_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, null, 2, "one", 3, "one", 4, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "two", 2, null, 3, "two", 4, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "three", 2, "three", 3, null, 4, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", 4, null));
    }

    @Test
    void ofOrderedNullable4_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
    }

    @Test
    void ofOrderedNullable5() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five");
        assertEquals(5, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
    }

    @Test
    void ofOrderedNullable5_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five"));
    }

    @Test
    void ofOrderedNullable5_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null));
    }

    @Test
    void ofOrderedNullable5_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
    }

    @Test
    void ofOrderedNullable6() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six");
        assertEquals(6, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
    }

    @Test
    void ofOrderedNullable6_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six"));
    }

    @Test
    void ofOrderedNullable6_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null));
    }

    @Test
    void ofOrderedNullable6_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
    }

    @Test
    void ofOrderedNullable7() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven");
        assertEquals(7, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
    }

    @Test
    void ofOrderedNullable7_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven"));
    }

    @Test
    void ofOrderedNullable7_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null));
    }

    @Test
    void ofOrderedNullable7_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
        assertEquals("seven", entryList.get(6).getValue());
    }

    @Test
    void ofOrderedNullable8() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight");
        assertEquals(8, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
    }

    @Test
    void ofOrderedNullable8_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight"));
    }

    @Test
    void ofOrderedNullable8_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null));
    }

    @Test
    void ofOrderedNullable8_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
        assertEquals("seven", entryList.get(6).getValue());
        assertEquals("eight", entryList.get(7).getValue());
    }

    @Test
    void ofOrderedNullable9() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine");
        assertEquals(9, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
        assertEquals("nine",  map.get(9));
    }

    @Test
    void ofOrderedNullable9_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine"));
    }

    @Test
    void ofOrderedNullable9_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null));
    }

    @Test
    void ofOrderedNullable9_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals(9, entryList.get(8).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
        assertEquals("seven", entryList.get(6).getValue());
        assertEquals("eight", entryList.get(7).getValue());
        assertEquals("nine",  entryList.get(8).getValue());
    }

    @Test
    void ofOrderedNullable10() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten");
        assertEquals(10, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
        assertEquals("nine",  map.get(9));
        assertEquals("ten",   map.get(10));
    }

    @Test
    void ofOrderedNullable10_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten"));
    }

    @Test
    void ofOrderedNullable10_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null));
    }

    @Test
    void ofOrderedNullable10_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals(9, entryList.get(8).getKey());
        assertEquals(10, entryList.get(9).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
        assertEquals("seven", entryList.get(6).getValue());
        assertEquals("eight", entryList.get(7).getValue());
        assertEquals("nine",  entryList.get(8).getValue());
        assertEquals("ten",   entryList.get(9).getValue());
    }

    @Test
    void ofOrderedNullable11() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven");
        assertEquals(11, map.size());
        assertEquals("one",    map.get(1));
        assertEquals("two",    map.get(2));
        assertEquals("three",  map.get(3));
        assertEquals("four",   map.get(4));
        assertEquals("five",   map.get(5));
        assertEquals("six",    map.get(6));
        assertEquals("seven",  map.get(7));
        assertEquals("eight",  map.get(8));
        assertEquals("nine",   map.get(9));
        assertEquals("ten",    map.get(10));
        assertEquals("eleven", map.get(11));
    }

    @Test
    void ofOrderedNullable11_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six", 11, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven", 11, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight", 11, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine", 11, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten", 11, "ten"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", null, "eleven"));
    }

    @Test
    void ofOrderedNullable11_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six", 11, "six"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven", 11, "seven"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight", 11, "eight"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine", 11, "nine"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null, 11, "ten"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", 11, null));
    }

    @Test
    void ofOrderedNullable11_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals(9, entryList.get(8).getKey());
        assertEquals(10, entryList.get(9).getKey());
        assertEquals(11, entryList.get(10).getKey());
        assertEquals("one",    entryList.get(0).getValue());
        assertEquals("two",    entryList.get(1).getValue());
        assertEquals("three",  entryList.get(2).getValue());
        assertEquals("four",   entryList.get(3).getValue());
        assertEquals("five",   entryList.get(4).getValue());
        assertEquals("six",    entryList.get(5).getValue());
        assertEquals("seven",  entryList.get(6).getValue());
        assertEquals("eight",  entryList.get(7).getValue());
        assertEquals("nine",   entryList.get(8).getValue());
        assertEquals("ten",    entryList.get(9).getValue());
        assertEquals("eleven", entryList.get(10).getValue());
    }

    @Test
    void ofOrderedNullable12() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve");
        assertEquals(12, map.size());
        assertEquals("one",    map.get(1));
        assertEquals("two",    map.get(2));
        assertEquals("three",  map.get(3));
        assertEquals("four",   map.get(4));
        assertEquals("five",   map.get(5));
        assertEquals("six",    map.get(6));
        assertEquals("seven",  map.get(7));
        assertEquals("eight",  map.get(8));
        assertEquals("nine",   map.get(9));
        assertEquals("ten",    map.get(10));
        assertEquals("eleven", map.get(11));
        assertEquals("twelve", map.get(12));
    }

    @Test
    void ofOrderedNullable12_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one", 12, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two", 12, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three", 12, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four", 12, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five", 12, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six", 11, "six", 12, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven", 11, "seven", 12, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight", 11, "eight", 12, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine", 11, "nine", 12, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten", 11, "ten", 12, "ten"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", null, "eleven", 12, "eleven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedNullable(1, "twelve", 2, "twelve", 3, "twelve", 4, "twelve", 5, "twelve", 6, "twelve", 7, "twelve", 8, "twelve", 9, "twelve", 10, "twelve", 11, "twelve", null, "twelve"));
    }

    @Test
    void ofOrderedNullable12_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one", 12, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two", 12, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three", 12, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four", 12, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five", 12, "five"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six", 11, "six", 12, "six"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven", 11, "seven", 12, "seven"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight", 11, "eight", 12, "eight"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine", 11, "nine", 12, "nine"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null, 11, "ten", 12, "ten"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", 11, null, 12, "eleven"));
        assertDoesNotThrow(() -> Maps.ofOrderedNullable(1, "twelve", 2, "twelve", 3, "twelve", 4, "twelve", 5, "twelve", 6, "twelve", 7, "twelve", 8, "twelve", 9, "twelve", 10, "twelve", 11, "twelve", 12, null));
    }

    @Test
    void ofOrderedNullable12_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals(9, entryList.get(8).getKey());
        assertEquals(10, entryList.get(9).getKey());
        assertEquals(11, entryList.get(10).getKey());
        assertEquals(12, entryList.get(11).getKey());
        assertEquals("one",    entryList.get(0).getValue());
        assertEquals("two",    entryList.get(1).getValue());
        assertEquals("three",  entryList.get(2).getValue());
        assertEquals("four",   entryList.get(3).getValue());
        assertEquals("five",   entryList.get(4).getValue());
        assertEquals("six",    entryList.get(5).getValue());
        assertEquals("seven",  entryList.get(6).getValue());
        assertEquals("eight",  entryList.get(7).getValue());
        assertEquals("nine",   entryList.get(8).getValue());
        assertEquals("ten",    entryList.get(9).getValue());
        assertEquals("eleven", entryList.get(10).getValue());
        assertEquals("twelve", entryList.get(11).getValue());
    }

    @Test
    void ofOrderedNullable_whenMutate_thenThrow() {
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrderedNullable(1, "one").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrderedNullable(1, "one", 2, "two").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven").put(0, "zero"));
        assertThrows(UnsupportedOperationException.class, () -> Maps.ofOrderedNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve").put(0, "zero"));
    }

    @Test
    void ofOrderedMutable1() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one");
        assertEquals(1, map.size());
        assertEquals("one", map.get(1));
    }

    @Test
    void ofOrderedMutable1_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(null, "one"));
    }

    @Test
    void ofOrderedMutable1_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, null));
    }

    @Test
    void ofOrderedMutable1_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals("one", entryList.get(0).getValue());
    }

    @Test
    void ofOrderedMutable2() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two");
        assertEquals(2, map.size());
        assertEquals("one", map.get(1));
        assertEquals("two", map.get(2));
    }

    @Test
    void ofOrderedMutable2_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(null, "one", 2, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "two", null, "two"));
    }

    @Test
    void ofOrderedMutable2_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, null, 2, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "two", 2, null));
    }

    @Test
    void ofOrderedMutable2_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals("one", entryList.get(0).getValue());
        assertEquals("two", entryList.get(1).getValue());
    }

    @Test
    void ofOrderedMutable3() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three");
        assertEquals(3, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
    }

    @Test
    void ofOrderedMutable3_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(null, "one", 2, "one", 3, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "two", null, "two", 3, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "three", 2, "three", null, "three"));
    }

    @Test
    void ofOrderedMutable3_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, null, 2, "one", 3, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "two", 2, null, 3, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "three", 2, "three", 3, null));
    }

    @Test
    void ofOrderedMutable3_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
    }

    @Test
    void ofOrderedMutable4() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four");
        assertEquals(4, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
    }

    @Test
    void ofOrderedMutable4_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(null, "one", 2, "one", 3, "one", 4, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "two", null, "two", 3, "two", 4, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "three", 2, "three", null, "three", 4, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", null, "four"));
    }

    @Test
    void ofOrderedMutable4_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, null, 2, "one", 3, "one", 4, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "two", 2, null, 3, "two", 4, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "three", 2, "three", 3, null, 4, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", 4, null));
    }

    @Test
    void ofOrderedMutable4_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
    }

    @Test
    void ofOrderedMutable5() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five");
        assertEquals(5, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
    }

    @Test
    void ofOrderedMutable5_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five"));
    }

    @Test
    void ofOrderedMutable5_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null));
    }

    @Test
    void ofOrderedMutable5_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
    }

    @Test
    void ofOrderedMutable6() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six");
        assertEquals(6, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
    }

    @Test
    void ofOrderedMutable6_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six"));
    }

    @Test
    void ofOrderedMutable6_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null));
    }

    @Test
    void ofOrderedMutable6_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
    }

    @Test
    void ofOrderedMutable7() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven");
        assertEquals(7, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
    }

    @Test
    void ofOrderedMutable7_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven"));
    }

    @Test
    void ofOrderedMutable7_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null));
    }

    @Test
    void ofOrderedMutable7_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
        assertEquals("seven", entryList.get(6).getValue());
    }

    @Test
    void ofOrderedMutable8() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight");
        assertEquals(8, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
    }

    @Test
    void ofOrderedMutable8_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight"));
    }

    @Test
    void ofOrderedMutable8_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null));
    }

    @Test
    void ofOrderedMutable8_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
        assertEquals("seven", entryList.get(6).getValue());
        assertEquals("eight", entryList.get(7).getValue());
    }

    @Test
    void ofOrderedMutable9() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine");
        assertEquals(9, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
        assertEquals("nine",  map.get(9));
    }

    @Test
    void ofOrderedMutable9_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine"));
    }

    @Test
    void ofOrderedMutable9_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null));
    }

    @Test
    void ofOrderedMutable9_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals(9, entryList.get(8).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
        assertEquals("seven", entryList.get(6).getValue());
        assertEquals("eight", entryList.get(7).getValue());
        assertEquals("nine",  entryList.get(8).getValue());
    }

    @Test
    void ofOrderedMutable10() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten");
        assertEquals(10, map.size());
        assertEquals("one",   map.get(1));
        assertEquals("two",   map.get(2));
        assertEquals("three", map.get(3));
        assertEquals("four",  map.get(4));
        assertEquals("five",  map.get(5));
        assertEquals("six",   map.get(6));
        assertEquals("seven", map.get(7));
        assertEquals("eight", map.get(8));
        assertEquals("nine",  map.get(9));
        assertEquals("ten",   map.get(10));
    }

    @Test
    void ofOrderedMutable10_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten"));
    }

    @Test
    void ofOrderedMutable10_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null));
    }

    @Test
    void ofOrderedMutable10_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals(9, entryList.get(8).getKey());
        assertEquals(10, entryList.get(9).getKey());
        assertEquals("one",   entryList.get(0).getValue());
        assertEquals("two",   entryList.get(1).getValue());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals("four",  entryList.get(3).getValue());
        assertEquals("five",  entryList.get(4).getValue());
        assertEquals("six",   entryList.get(5).getValue());
        assertEquals("seven", entryList.get(6).getValue());
        assertEquals("eight", entryList.get(7).getValue());
        assertEquals("nine",  entryList.get(8).getValue());
        assertEquals("ten",   entryList.get(9).getValue());
    }

    @Test
    void ofOrderedMutable11() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven");
        assertEquals(11, map.size());
        assertEquals("one",    map.get(1));
        assertEquals("two",    map.get(2));
        assertEquals("three",  map.get(3));
        assertEquals("four",   map.get(4));
        assertEquals("five",   map.get(5));
        assertEquals("six",    map.get(6));
        assertEquals("seven",  map.get(7));
        assertEquals("eight",  map.get(8));
        assertEquals("nine",   map.get(9));
        assertEquals("ten",    map.get(10));
        assertEquals("eleven", map.get(11));
    }

    @Test
    void ofOrderedMutable11_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six", 11, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven", 11, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight", 11, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine", 11, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten", 11, "ten"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", null, "eleven"));
    }

    @Test
    void ofOrderedMutable11_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six", 11, "six"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven", 11, "seven"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight", 11, "eight"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine", 11, "nine"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null, 11, "ten"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", 11, null));
    }

    @Test
    void ofOrderedMutable11_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals(9, entryList.get(8).getKey());
        assertEquals(10, entryList.get(9).getKey());
        assertEquals(11, entryList.get(10).getKey());
        assertEquals("one",    entryList.get(0).getValue());
        assertEquals("two",    entryList.get(1).getValue());
        assertEquals("three",  entryList.get(2).getValue());
        assertEquals("four",   entryList.get(3).getValue());
        assertEquals("five",   entryList.get(4).getValue());
        assertEquals("six",    entryList.get(5).getValue());
        assertEquals("seven",  entryList.get(6).getValue());
        assertEquals("eight",  entryList.get(7).getValue());
        assertEquals("nine",   entryList.get(8).getValue());
        assertEquals("ten",    entryList.get(9).getValue());
        assertEquals("eleven", entryList.get(10).getValue());
    }

    @Test
    void ofOrderedMutable12() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve");
        assertEquals(12, map.size());
        assertEquals("one",    map.get(1));
        assertEquals("two",    map.get(2));
        assertEquals("three",  map.get(3));
        assertEquals("four",   map.get(4));
        assertEquals("five",   map.get(5));
        assertEquals("six",    map.get(6));
        assertEquals("seven",  map.get(7));
        assertEquals("eight",  map.get(8));
        assertEquals("nine",   map.get(9));
        assertEquals("ten",    map.get(10));
        assertEquals("eleven", map.get(11));
        assertEquals("twelve", map.get(12));
    }

    @Test
    void ofOrderedMutable12_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(null, "one", 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one", 12, "one"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "two", null, "two", 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two", 12, "two"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "three", 2, "three", null, "three", 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three", 12, "three"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", null, "four", 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four", 12, "four"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", null, "five", 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five", 12, "five"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", null, "six", 7, "six", 8, "six", 9, "six", 10, "six", 11, "six", 12, "six"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", null, "seven", 8, "seven", 9, "seven", 10, "seven", 11, "seven", 12, "seven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", null, "eight", 9, "eight", 10, "eight", 11, "eight", 12, "eight"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", null, "nine", 10, "nine", 11, "nine", 12, "nine"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", null, "ten", 11, "ten", 12, "ten"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", null, "eleven", 12, "eleven"));
        assertThrows(NullPointerException.class, () -> Maps.ofOrderedMutable(1, "twelve", 2, "twelve", 3, "twelve", 4, "twelve", 5, "twelve", 6, "twelve", 7, "twelve", 8, "twelve", 9, "twelve", 10, "twelve", 11, "twelve", null, "twelve"));
    }

    @Test
    void ofOrderedMutable12_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, null, 2, "one", 3, "one", 4, "one", 5, "one", 6, "one", 7, "one", 8, "one", 9, "one", 10, "one", 11, "one", 12, "one"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "two", 2, null, 3, "two", 4, "two", 5, "two", 6, "two", 7, "two", 8, "two", 9, "two", 10, "two", 11, "two", 12, "two"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "three", 2, "three", 3, null, 4, "three", 5, "three", 6, "three", 7, "three", 8, "three", 9, "three", 10, "three", 11, "three", 12, "three"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "four", 2, "four", 3, "four", 4, null, 5, "four", 6, "four", 7, "four", 8, "four", 9, "four", 10, "four", 11, "four", 12, "four"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "five", 2, "five", 3, "five", 4, "five", 5, null, 6, "five", 7, "five", 8, "five", 9, "five", 10, "five", 11, "five", 12, "five"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "six", 2, "six", 3, "six", 4, "six", 5, "six", 6, null, 7, "six", 8, "six", 9, "six", 10, "six", 11, "six", 12, "six"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "seven", 2, "seven", 3, "seven", 4, "seven", 5, "seven", 6, "seven", 7, null, 8, "seven", 9, "seven", 10, "seven", 11, "seven", 12, "seven"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "eight", 2, "eight", 3, "eight", 4, "eight", 5, "eight", 6, "eight", 7, "eight", 8, null, 9, "eight", 10, "eight", 11, "eight", 12, "eight"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "nine", 2, "nine", 3, "nine", 4, "nine", 5, "nine", 6, "nine", 7, "nine", 8, "nine", 9, null, 10, "nine", 11, "nine", 12, "nine"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "ten", 2, "ten", 3, "ten", 4, "ten", 5, "ten", 6, "ten", 7, "ten", 8, "ten", 9, "ten", 10, null, 11, "ten", 12, "ten"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "eleven", 2, "eleven", 3, "eleven", 4, "eleven", 5, "eleven", 6, "eleven", 7, "eleven", 8, "eleven", 9, "eleven", 10, "eleven", 11, null, 12, "eleven"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "twelve", 2, "twelve", 3, "twelve", 4, "twelve", 5, "twelve", 6, "twelve", 7, "twelve", 8, "twelve", 9, "twelve", 10, "twelve", 11, "twelve", 12, null));
    }

    @Test
    void ofOrderedMutable12_thenOrdered() {
        Map<Integer, String> map = Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve");
        var entryList = new ArrayList<>(map.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals(9, entryList.get(8).getKey());
        assertEquals(10, entryList.get(9).getKey());
        assertEquals(11, entryList.get(10).getKey());
        assertEquals(12, entryList.get(11).getKey());
        assertEquals("one",    entryList.get(0).getValue());
        assertEquals("two",    entryList.get(1).getValue());
        assertEquals("three",  entryList.get(2).getValue());
        assertEquals("four",   entryList.get(3).getValue());
        assertEquals("five",   entryList.get(4).getValue());
        assertEquals("six",    entryList.get(5).getValue());
        assertEquals("seven",  entryList.get(6).getValue());
        assertEquals("eight",  entryList.get(7).getValue());
        assertEquals("nine",   entryList.get(8).getValue());
        assertEquals("ten",    entryList.get(9).getValue());
        assertEquals("eleven", entryList.get(10).getValue());
        assertEquals("twelve", entryList.get(11).getValue());
    }

    @Test
    void ofOrderedMutable_whenMutate_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "one").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "one", 2, "two").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven").put(0, "zero"));
        assertDoesNotThrow(() -> Maps.ofOrderedMutable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve").put(0, "zero"));
    }

    @Test
    void copyOfNullable1_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map1 = Maps.ofNullable(1, "one");
        Map<Integer, String> copy1 = Maps.copyOfNullable(map1);
        assertEquals(1, copy1.size());
        assertEquals(map1, copy1);
        assertNotSame(map1, copy1);
    }

    @Test
    void copyOfNullable2_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map2 = Maps.ofNullable(1, "one", 2, "two");
        Map<Integer, String> copy2 = Maps.copyOfNullable(map2);
        assertEquals(2, copy2.size());
        assertEquals(map2, copy2);
        assertNotSame(map2, copy2);
    }

    @Test
    void copyOfNullable3_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map3 = Maps.ofNullable(1, "one", 2, "two", 3, "three");
        Map<Integer, String> copy3 = Maps.copyOfNullable(map3);
        assertEquals(3, copy3.size());
        assertEquals(map3, copy3);
        assertNotSame(map3, copy3);
    }

    @Test
    void copyOfNullable4_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map4 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four");
        Map<Integer, String> copy4 = Maps.copyOfNullable(map4);
        assertEquals(4, copy4.size());
        assertEquals(map4, copy4);
        assertNotSame(map4, copy4);
    }

    @Test
    void copyOfNullable5_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map5 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five");
        Map<Integer, String> copy5 = Maps.copyOfNullable(map5);
        assertEquals(5, copy5.size());
        assertEquals(map5, copy5);
        assertNotSame(map5, copy5);
    }

    @Test
    void copyOfNullable6_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map6 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six");
        Map<Integer, String> copy6 = Maps.copyOfNullable(map6);
        assertEquals(6, copy6.size());
        assertEquals(map6, copy6);
        assertNotSame(map6, copy6);
    }

    @Test
    void copyOfNullable7_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map7 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven");
        Map<Integer, String> copy7 = Maps.copyOfNullable(map7);
        assertEquals(7, copy7.size());
        assertEquals(map7, copy7);
        assertNotSame(map7, copy7);
    }

    @Test
    void copyOfNullable8_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map8 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight");
        Map<Integer, String> copy8 = Maps.copyOfNullable(map8);
        assertEquals(8, copy8.size());
        assertEquals(map8, copy8);
        assertNotSame(map8, copy8);
    }

    @Test
    void copyOfNullable9_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map9 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine");
        Map<Integer, String> copy9 = Maps.copyOfNullable(map9);
        assertEquals(9, copy9.size());
        assertEquals(map9, copy9);
        assertNotSame(map9, copy9);
    }

    @Test
    void copyOfNullable10_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map10 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten");
        Map<Integer, String> copy10 = Maps.copyOfNullable(map10);
        assertEquals(10, copy10.size());
        assertEquals(map10, copy10);
        assertNotSame(map10, copy10);
    }

    @Test
    void copyOfNullable11_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map11 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven");
        Map<Integer, String> copy11 = Maps.copyOfNullable(map11);
        assertEquals(11, copy11.size());
        assertEquals(map11, copy11);
        assertNotSame(map11, copy11);
    }

    @Test
    void copyOfNullable12_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map12 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve");
        Map<Integer, String> copy12 = Maps.copyOfNullable(map12);
        assertEquals(12, copy12.size());
        assertEquals(map12, copy12);
        assertNotSame(map12, copy12);
    }

    @Test
    void copyOfNullable_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.copyOfNullable(Maps.ofNullable(0, "zero", null, "one")));
    }

    @Test
    void copyOfNullable_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.copyOfNullable(Maps.ofNullable(0, "zero", 1, null)));
    }

    @Test
    void copyOfNullable_whenMutate_thenThrow() {
        assertThrows(UnsupportedOperationException.class, () -> Maps.copyOfNullable(Maps.ofNullable(0, "zero", 1, "one")).put(2, "two"));
    }

    @Test
    void copyOfOrdered1_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map1 = Maps.ofNullable(1, "one");
        Map<Integer, String> copy1 = Maps.copyOfOrdered(map1);
        assertEquals(1, copy1.size());
        assertEquals(map1, copy1);
        assertNotSame(map1, copy1);
    }

    @Test
    void copyOfOrdered2_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map2 = Maps.ofNullable(1, "one", 2, "two");
        Map<Integer, String> copy2 = Maps.copyOfOrdered(map2);
        assertEquals(2, copy2.size());
        assertEquals(map2, copy2);
        assertNotSame(map2, copy2);
    }

    @Test
    void copyOfOrdered3_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map3 = Maps.ofNullable(1, "one", 2, "two", 3, "three");
        Map<Integer, String> copy3 = Maps.copyOfOrdered(map3);
        assertEquals(3, copy3.size());
        assertEquals(map3, copy3);
        assertNotSame(map3, copy3);
    }

    @Test
    void copyOfOrdered4_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map4 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four");
        Map<Integer, String> copy4 = Maps.copyOfOrdered(map4);
        assertEquals(4, copy4.size());
        assertEquals(map4, copy4);
        assertNotSame(map4, copy4);
    }

    @Test
    void copyOfOrdered5_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map5 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five");
        Map<Integer, String> copy5 = Maps.copyOfOrdered(map5);
        assertEquals(5, copy5.size());
        assertEquals(map5, copy5);
        assertNotSame(map5, copy5);
    }

    @Test
    void copyOfOrdered6_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map6 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six");
        Map<Integer, String> copy6 = Maps.copyOfOrdered(map6);
        assertEquals(6, copy6.size());
        assertEquals(map6, copy6);
        assertNotSame(map6, copy6);
    }

    @Test
    void copyOfOrdered7_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map7 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven");
        Map<Integer, String> copy7 = Maps.copyOfOrdered(map7);
        assertEquals(7, copy7.size());
        assertEquals(map7, copy7);
        assertNotSame(map7, copy7);
    }

    @Test
    void copyOfOrdered8_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map8 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight");
        Map<Integer, String> copy8 = Maps.copyOfOrdered(map8);
        assertEquals(8, copy8.size());
        assertEquals(map8, copy8);
        assertNotSame(map8, copy8);
    }

    @Test
    void copyOfOrdered9_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map9 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine");
        Map<Integer, String> copy9 = Maps.copyOfOrdered(map9);
        assertEquals(9, copy9.size());
        assertEquals(map9, copy9);
        assertNotSame(map9, copy9);
    }

    @Test
    void copyOfOrdered10_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map10 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten");
        Map<Integer, String> copy10 = Maps.copyOfOrdered(map10);
        assertEquals(10, copy10.size());
        assertEquals(map10, copy10);
        assertNotSame(map10, copy10);
    }

    @Test
    void copyOfOrdered11_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map11 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven");
        Map<Integer, String> copy11 = Maps.copyOfOrdered(map11);
        assertEquals(11, copy11.size());
        assertEquals(map11, copy11);
        assertNotSame(map11, copy11);
    }

    @Test
    void copyOfOrdered12_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map12 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve");
        Map<Integer, String> copy12 = Maps.copyOfOrdered(map12);
        assertEquals(12, copy12.size());
        assertEquals(map12, copy12);
        assertNotSame(map12, copy12);
    }

    @Test
    void copyOfOrdered_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.copyOfOrdered(Maps.ofNullable(0, "zero", null, "one")));
    }

    @Test
    void copyOfOrdered_whenNullValues_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.copyOfOrdered(Maps.ofNullable(0, "zero", 1, null)));
    }

    @Test
    void copyOfOrdered_whenMutate_thenThrow() {
        assertThrows(UnsupportedOperationException.class, () -> Maps.copyOfOrdered(Maps.ofNullable(0, "zero", 1, "one")).put(2, "two"));
    }

    @Test
    void copyOfOrdered_whenCopy_thenIsOrdered() {
        var mapToCopy = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten");
        var result = Maps.copyOfOrdered(mapToCopy);
        assertNotSame(mapToCopy, result);
        assertEquals(mapToCopy, result);
        var entryList = new ArrayList<>(mapToCopy.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals("one", entryList.get(0).getValue());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals("two", entryList.get(1).getValue());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals("four", entryList.get(3).getValue());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals("five", entryList.get(4).getValue());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals("six", entryList.get(5).getValue());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals("seven", entryList.get(6).getValue());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals("eight", entryList.get(7).getValue());
        assertEquals(9, entryList.get(8).getKey());
        assertEquals("nine", entryList.get(8).getValue());
        assertEquals(10, entryList.get(9).getKey());
        assertEquals("ten", entryList.get(9).getValue());
    }

    @Test
    void copyOfOrderedNullable1_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map1 = Maps.ofNullable(1, "one");
        Map<Integer, String> copy1 = Maps.copyOfOrderedNullable(map1);
        assertEquals(1, copy1.size());
        assertEquals(map1, copy1);
        assertNotSame(map1, copy1);
    }

    @Test
    void copyOfOrderedNullable2_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map2 = Maps.ofNullable(1, "one", 2, "two");
        Map<Integer, String> copy2 = Maps.copyOfOrderedNullable(map2);
        assertEquals(2, copy2.size());
        assertEquals(map2, copy2);
        assertNotSame(map2, copy2);
    }

    @Test
    void copyOfOrderedNullable3_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map3 = Maps.ofNullable(1, "one", 2, "two", 3, "three");
        Map<Integer, String> copy3 = Maps.copyOfOrderedNullable(map3);
        assertEquals(3, copy3.size());
        assertEquals(map3, copy3);
        assertNotSame(map3, copy3);
    }

    @Test
    void copyOfOrderedNullable4_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map4 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four");
        Map<Integer, String> copy4 = Maps.copyOfOrderedNullable(map4);
        assertEquals(4, copy4.size());
        assertEquals(map4, copy4);
        assertNotSame(map4, copy4);
    }

    @Test
    void copyOfOrderedNullable5_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map5 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five");
        Map<Integer, String> copy5 = Maps.copyOfOrderedNullable(map5);
        assertEquals(5, copy5.size());
        assertEquals(map5, copy5);
        assertNotSame(map5, copy5);
    }

    @Test
    void copyOfOrderedNullable6_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map6 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six");
        Map<Integer, String> copy6 = Maps.copyOfOrderedNullable(map6);
        assertEquals(6, copy6.size());
        assertEquals(map6, copy6);
        assertNotSame(map6, copy6);
    }

    @Test
    void copyOfOrderedNullable7_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map7 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven");
        Map<Integer, String> copy7 = Maps.copyOfOrderedNullable(map7);
        assertEquals(7, copy7.size());
        assertEquals(map7, copy7);
        assertNotSame(map7, copy7);
    }

    @Test
    void copyOfOrderedNullable8_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map8 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight");
        Map<Integer, String> copy8 = Maps.copyOfOrderedNullable(map8);
        assertEquals(8, copy8.size());
        assertEquals(map8, copy8);
        assertNotSame(map8, copy8);
    }

    @Test
    void copyOfOrderedNullable9_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map9 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine");
        Map<Integer, String> copy9 = Maps.copyOfOrderedNullable(map9);
        assertEquals(9, copy9.size());
        assertEquals(map9, copy9);
        assertNotSame(map9, copy9);
    }

    @Test
    void copyOfOrderedNullable10_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map10 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten");
        Map<Integer, String> copy10 = Maps.copyOfOrderedNullable(map10);
        assertEquals(10, copy10.size());
        assertEquals(map10, copy10);
        assertNotSame(map10, copy10);
    }

    @Test
    void copyOfOrderedNullable11_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map11 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven");
        Map<Integer, String> copy11 = Maps.copyOfOrderedNullable(map11);
        assertEquals(11, copy11.size());
        assertEquals(map11, copy11);
        assertNotSame(map11, copy11);
    }

    @Test
    void copyOfOrderedNullable12_whenCopy_thenEqualAndNotSame() {
        Map<Integer, String> map12 = Maps.ofNullable(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten", 11, "eleven", 12, "twelve");
        Map<Integer, String> copy12 = Maps.copyOfOrderedNullable(map12);
        assertEquals(12, copy12.size());
        assertEquals(map12, copy12);
        assertNotSame(map12, copy12);
    }

    @Test
    void copyOfOrderedNullable_whenNullKeys_thenThrow() {
        assertThrows(NullPointerException.class, () -> Maps.copyOfOrderedNullable(Maps.ofNullable(0, "zero", null, "one")));
    }

    @Test
    void copyOfOrderedNullable_whenNullValues_thenDontThrow() {
        assertDoesNotThrow(() -> Maps.copyOfOrderedNullable(Maps.ofNullable(0, "zero", 1, null)));
    }

    @Test
    void copyOfOrderedNullable_whenMutate_thenThrow() {
        assertThrows(UnsupportedOperationException.class, () -> Maps.copyOfOrderedNullable(Maps.ofNullable(0, "zero", 1, "one")).put(2, "two"));
    }

    @Test
    void copyOfOrderedNullable_whenCopy_thenIsOrdered() {
        var mapToCopy = Maps.ofOrdered(1, "one", 2, "two", 3, "three", 4, "four", 5, "five", 6, "six", 7, "seven", 8, "eight", 9, "nine", 10, "ten");
        var result = Maps.copyOfOrderedNullable(mapToCopy);
        assertNotSame(mapToCopy, result);
        assertEquals(mapToCopy, result);
        var entryList = new ArrayList<>(mapToCopy.entrySet());
        assertEquals(1, entryList.get(0).getKey());
        assertEquals("one", entryList.get(0).getValue());
        assertEquals(2, entryList.get(1).getKey());
        assertEquals("two", entryList.get(1).getValue());
        assertEquals(3, entryList.get(2).getKey());
        assertEquals("three", entryList.get(2).getValue());
        assertEquals(4, entryList.get(3).getKey());
        assertEquals("four", entryList.get(3).getValue());
        assertEquals(5, entryList.get(4).getKey());
        assertEquals("five", entryList.get(4).getValue());
        assertEquals(6, entryList.get(5).getKey());
        assertEquals("six", entryList.get(5).getValue());
        assertEquals(7, entryList.get(6).getKey());
        assertEquals("seven", entryList.get(6).getValue());
        assertEquals(8, entryList.get(7).getKey());
        assertEquals("eight", entryList.get(7).getValue());
        assertEquals(9, entryList.get(8).getKey());
        assertEquals("nine", entryList.get(8).getValue());
        assertEquals(10, entryList.get(9).getKey());
        assertEquals("ten", entryList.get(9).getValue());
    }

}
